package org.neidysvelasquez.claims_management_system.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents a claim filed by a user in the Claims Management System.
 * Each claim is associated with a user and may have related documents
 * and a status history.
 */
@Entity
@Getter
@Setter
public class Claims {

    /**
     * The unique identifier for the claim, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * A description of the claim, detailing the issue or request.
     * Cannot be blank.
     */
    @NotBlank(message = "Description is required")
    private String description;

    /**
     * The current status of the claim (e.g., Pending, Approved, Rejected).
     * Cannot be blank.
     */
    @NotBlank(message = "Status is required")
    private String status;

    /**
     * The user who filed the claim. This field establishes a many-to-one
     * relationship with the User entity. Cannot be null.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * A list of documents related to the claim. This field establishes a
     * one-to-many relationship with the ClaimDocument entity.
     */
    @OneToMany(mappedBy = "claim", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ClaimDocument> claimDocuments;

    /**
     * A list of status updates (history) for the claim. This field establishes
     * a one-to-many relationship with the StatusHistory entity.
     */
    @OneToMany(mappedBy = "claim", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<StatusHistory> statusHistories;

    /**
     * The date and time when the claim was created.
     * Automatically populated when the claim is persisted.
     */
    @NotNull
    @Column(updatable = false)
    private LocalDateTime createdAt;

    /**
     * Sets the createdAt field to the current timestamp before persisting.
     */
    @PrePersist
    protected void onCreate() {
        this.createdAt = LocalDateTime.now();
    }
}
